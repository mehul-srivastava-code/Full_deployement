pipeline {
    agent any

    environment {
        // Jenkins credentials (you must define these in Jenkins > Credentials)
        MONGODB_URI             = credentials('mongo-uri')
        JWT_SECRET              = credentials('jwt-secret')
        CLOUDINARY_CLOUD_NAME   = credentials('cloud-name')
        CLOUDINARY_API_KEY      = credentials('cloud-key')
        CLOUDINARY_API_SECRET   = credentials('cloud-secret')
        NODE_ENV                = 'production'
        PORT                    = '5001'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git 'https://github.com/mehul-srivastava-code/Full_deployement.git'
            }
        }

        stage('Create .env File for Frontend & Backend') {
            steps {
                // Create .env file inside frontend/
                writeFile file: 'frontend/.env', text: """
VITE_BACKEND_URL=http://backend:5001
"""

                // Create .env for backend and Docker Compose
                writeFile file: '.env', text: """
MONGODB_URI=${MONGODB_URI}
JWT_SECRET=${JWT_SECRET}
CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
NODE_ENV=${NODE_ENV}
PORT=${PORT}
"""
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                bat '''
                    IF EXIST docker-compose.yml (
                        docker-compose down
                    )
                    docker-compose --env-file .env up --build -d
                '''
            }
        }

        stage('Verify Containers') {
            steps {
                bat 'docker ps'
            }
        }
    }

    post {
        success {
            echo '✅ Deployment complete!'
        }
        failure {
            echo '❌ Deployment failed.'
        }
    }
}
